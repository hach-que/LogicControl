"Name"    = 'LogicControl'
"Author"  = 'James Rhodes'
"Version" = '1.0'
"About"   = 'The LogicControl grammer'
          
"Case Sensitive" = False
"Start Symbol"   = <GlobalStatements>

! Define string ch 1 / 2 as set of printable character excluding quotes                 
{String Ch 1} = {Printable} - ['']
{String Ch 2} = {Printable} - ["]

! Allow underscores in identifiers
{LetterAndUnderscore} = {Letter} + [_]
{AlphaNumericAndUnderscore} = {AlphaNumeric} + [_]
              
! Identifiers are a letter followed by one or more alphanumeric characters              
Id            = {LetterAndUnderscore}{AlphaNumericAndUnderscore}*

! String allows either single or double quotes              
StringLiteral = '' {String Ch 1}* ''
              | '"' {String Ch 2}* '"'
              
! Numbers do not require a specific type; integers and floating
! point numbers are the same format.
NumberLiteral = {Digit}+('.'{Digit}+)?

<GlobalStatements> ::= <GlobalStatement> <GlobalStatements>
                     | <GlobalStatement>
               
<GlobalStatement> ::= <StructureDeclaration>
                    | <FunctionDeclaration>

<FunctionDeclaration> ::= <Type> Id '(' <ArgumentDeclarations> ')' <OptionalSemantic> '{' <Statements> '}'
                    
<StructureDeclaration> ::= struct Id '{' <FieldDeclarations> '}'

<FieldDeclarations> ::= <FieldDeclaration> <FieldDeclarations>
                          | <FieldDeclaration>

<FieldDeclaration> ::= <Type> Id <Semantic> ';'

<ArgumentDeclarations> ::= <ArgumentDeclaration> ',' <ArgumentDeclarations>
                         | <ArgumentDeclaration>

<ArgumentDeclaration> ::= <Type> Id

<Semantic> ::= ':' Id

<OptionalSemantic> ::= <Semantic>
                    | 

<Statements> ::= <TerminatedStatement> <Statements>
               | <TerminatedStatement>
              
<TerminatedStatement> ::= <Statement> ';'
               
<Statement> ::= <WhileStatement>
              | <IfStatement>      
              | <AssignStatement>
              | <ReturnStatement>
              | <BlockStatement>

<WhileStatement> ::= while '(' <Expression> ')' <Statement>
                                     
<IfStatement> ::= if '(' <Expression> ')' <Statement>
                | if '(' <Expression> ')' <Statement> else <Statement>

<AssignStatement> ::= Id '=' <Expression>

<ReturnStatement> ::= return <Expression>

<BlockStatement> ::= '{' <Statements> '}'

<Parameters> ::= <Expression> ',' <Parameters>
               | <Expression>               
              
<Expression>   ::= <Expression> '>'  <Add Exp> 
                 | <Expression> '<'  <Add Exp> 
                 | <Expression> '<=' <Add Exp> 
                 | <Expression> '>=' <Add Exp>
                 | <Expression> '==' <Add Exp>
                 | <Expression> '<>' <Add Exp>
                 | <Add Exp> 

<Add Exp>      ::= <Add Exp> '+' <Mult Exp>
                 | <Add Exp> '-' <Mult Exp>
                 | <Add Exp> '&' <Mult Exp>
                 | <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp> 
                | <Mult Exp> '/' <Negate Exp> 
                | <Negate Exp> 

<Negate Exp>  ::= '-' <Lookup Exp> 
                | <Lookup Exp> 

<Lookup Exp>  ::= <Value> '.' Id
                | <Value> 

<Value>       ::= ID           
                | StringLiteral
                | NumberLiteral
                | '(' <Expression> ')'
                | <Type> '(' <Parameters> ')'
                
<Type>    ::= void
            | number
            | string
            | vector2
            | vector3
            | vector4
            | Id
